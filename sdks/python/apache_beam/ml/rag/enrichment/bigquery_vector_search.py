from dataclasses import dataclass
from enum import Enum
from typing import Optional, List, Dict, Any, Union
from apache_beam.transforms.enrichment import EnrichmentSourceHandler
from apache_beam.ml.rag.types import Embedding
from google.cloud import bigquery

@dataclass
class BigQueryVectorSearchParameters:
    """Parameters for BigQuery vector search."""
    table_name: str
    embedding_column: str
    columns: List[str]
    neighbor_count: int
    metadata_restriction_template: str
    distance_type: Optional[str] = None
    options: Optional[Dict[str, Any]] = None

    def format_query(self, embeddings: List[Embedding]) -> str:
        """Format the vector search query template."""
        base_columns_str = ", ".join(f"base.{col}" for col in self.columns)
        columns_str = ", ".join(self.columns)
        distance_clause = (
            f", distance_type => '{self.distance_type}'"
            if self.distance_type else ""
        )
        options_clause = (
            f", options => {self.options}" 
            if self.options else ""
        )
        
         # Create metadata check function
        metadata_fn = """
        CREATE TEMP FUNCTION check_metadata(
          metadata ARRAY<STRUCT<key STRING, value STRING>>, 
          search_key STRING, 
          search_value STRING
        ) 
        AS ((
            SELECT COUNT(*) > 0 
            FROM UNNEST(metadata) 
            WHERE key = search_key AND value = search_value
        ));
        """

        # Union embeddings with IDs
        embedding_unions = []
        for emb in embeddings:
            embedding_str = (
                f"SELECT '{emb.id}' as id, "
                f"{[float(x) for x in emb.dense_embedding]} as embedding"
            )
            embedding_unions.append(embedding_str)
        embeddings_query = " UNION ALL ".join(embedding_unions)

        # Format metadata restrictions for each embedding
        metadata_restrictions = [
            f"({self.metadata_restriction_template.format(**emb.metadata)})"
            for emb in embeddings
        ]
        combined_restrictions = " OR ".join(metadata_restrictions)
                
        return f"""
        {metadata_fn}

        WITH query_embeddings AS ({embeddings_query})

        SELECT 
            query.id,
            ARRAY_AGG(
                STRUCT({base_columns_str})
            ) as chunks
        FROM VECTOR_SEARCH(
            (SELECT {columns_str}, {self.embedding_column} 
             FROM `{self.table_name}`
             WHERE {combined_restrictions}),
            '{self.embedding_column}',
            TABLE query_embeddings,
            top_k => {self.neighbor_count}
            {distance_clause}
            {options_clause}
        )
        GROUP BY query.id
        """

# def join_fn(selft: Embedding, right: )

class BigQueryVectorSearchEnrichmentHandler(
    EnrichmentSourceHandler[
        Union[Embedding, List[Embedding]], 
        Union[Embedding, List[Embedding]]
    ]
):
    """Enrichment handler for BigQuery vector search."""
    
    def __init__(
        self,
        project: str,
        vector_search_parameters: BigQueryVectorSearchParameters,
        *,
        min_batch_size: int = 1,
        max_batch_size: int = 1000,
        **kwargs
    ):
        self.project = project
        self.vector_search_parameters = vector_search_parameters
        self.kwargs = kwargs
        self._batching_kwargs = {
            'min_batch_size': min_batch_size,
            'max_batch_size': max_batch_size
        }

    def __enter__(self):
        self.client = bigquery.Client(project=self.project, **self.kwargs)

    def __call__(
    self, 
    request: Union[Embedding, List[Embedding]], 
    *args, 
    **kwargs
    ) -> Union[Embedding, List[Embedding]]:
        """Process request(s) using BigQuery vector search.
        
        Args:
            request: Single Embedding or list of Embeddings to process
            
        Returns:
            Processed Embedding(s) with enrichment_output in metadata
        """
        # Convert single request to list for uniform processing
        requests = request if isinstance(request, list) else [request]
        
        # Generate and execute query
        query = self.vector_search_parameters.format_query(requests)
        query_job = self.client.query(query)
        results = query_job.result()

        # Map results back to embeddings
        id_to_embedding = {emb.id: emb for emb in requests}
        response = []
        for result_row in results:
            result_dict = dict(result_row.items())
            embedding = id_to_embedding[result_row.id]
            response.append((embedding, result_dict))

        return response

    def __exit__(self, exc_type, exc_val, exc_tb):
        self.client.close()

    def batch_elements_kwargs(self) -> Dict[str, int]:
        """Returns kwargs for beam.BatchElements."""
        return self._batching_kwargs

# Example usage:
# params = BigQueryVectorSearchParameters(
#     table_name='dataflow-twest.claude_test.rag_test',
#     embedding_column='embedding',
#     columns=['metadata', 'content'],
#     neighbor_count=3,
#     metadata_restriction_template=(
#         "check_metadata(metadata, 'language','{language}')"
#     )
# )

# embedding_in = [-0.0012595804873853922,0.09079299122095108,0.0043773152865469456,0.035924315452575684,0.0542798787355423,0.044353783130645752,0.034821938723325729,0.0065756267867982388,0.018829233944416046,0.073587439954280853,0.032489534467458725,-0.0062828976660966873,0.00033567979699000716,0.034019667655229568,0.10707282274961472,0.0063637751154601574,-0.042484618723392487,-0.029978863894939423,-0.039998464286327362,0.0035786442458629608,0.10137156397104263,-0.00076103874016553164,-0.025887409225106239,0.0005218627629801631,0.0068664969876408577,0.071571201086044312,-0.094468757510185242,-0.0324474461376667,0.033296037465333939,-0.023909009993076324,0.041589327156543732,-0.0010743053862825036,-0.024659985676407814,0.03572513535618782,0.011683525517582893,-0.062695518136024475,0.02812403067946434,0.024090422317385674,0.028369465842843056,0.066121950745582581,-0.035599011927843094,-0.053366202861070633,0.012999284081161022,0.019179351627826691,0.044477209448814392,-0.018346505239605904,-0.1245829313993454,-0.028229374438524246,0.03940127044916153,-0.020378755405545235,-0.036759864538908005,-0.0204935185611248,-0.0057653896510601044,-0.0051137884147465229,0.006754252128303051,0.0093325544148683548,-0.014458870515227318,0.031382154673337936,-0.013643604703247547,0.0014490337343886495,-0.033383049070835114,0.048588801175355911,-0.058031760156154633,0.075043506920337677,0.10001162439584732,0.020112860947847366,-0.0350736640393734,-0.04493272677063942,-0.047713484615087509,0.016561150550842285,-0.099112667143344879,0.063083641231060028,0.058560695499181747,0.055704466998577118,-0.035621814429759979,-0.032390989363193512,-0.0040762000717222691,-0.045457839965820312,0.068524911999702454,-0.032453775405883789,-0.077650129795074463,-0.044890046119689941,-0.023516418412327766,0.022127415984869003,-0.013329153880476952,0.050245940685272217,0.017976928502321243,0.00098829821217805147,-0.067951448261737823,0.0047194655053317547,0.074119366705417633,-0.0053791389800608158,0.032281927764415741,0.049209490418434143,-0.0071992804296314716,0.033404801040887833,-0.055314242839813232,0.01211892906576395,0.032576221972703934,0.0180234145373106,0.056280162185430527,0.011633310467004776,0.097911715507507324,-0.035069532692432404,-0.094177208840847015,-0.0639713853597641,0.043556910008192062,-0.0894283577799797,0.086923219263553619,-0.057585909962654114,-0.0086919274181127548,0.015002066269516945,-0.055315643548965454,-0.03028487041592598,-0.0028369377832859755,-0.054794464260339737,-0.072866417467594147,-0.025867326185107231,0.01710735447704792,0.12879066169261932,0.021093681454658508,-0.015852298587560654,0.022208653390407562,-0.0092252520844340324,0.0015953374095261097,-0.0547400563955307,0.056685168296098709,-2.4842291496003581e-33,-0.0028989093843847513,-0.0078177014365792274,-0.038934525102376938,0.11313313990831375,0.021862510591745377,0.034159887582063675,-0.01765027642250061,0.11019401252269745,-0.18043515086174011,0.0096286842599511147,0.081008985638618469,-0.07600412517786026,-0.0087487194687128067,0.093975618481636047,0.0069668609648942947,0.091692164540290833,-0.0086811156943440437,-0.003997438121587038,-0.016922775655984879,0.0098780877888202667,0.018720010295510292,0.064549118280410767,0.047816090285778046,-0.023182865232229233,-0.057640597224235535,-0.0024113398976624012,0.079483628273010254,-0.024626664817333221,-0.078264772891998291,0.046706162393093109,-0.046266019344329834,-0.025013169273734093,-0.098961196839809418,0.038332995027303696,0.016766894608736038,0.03903844952583313,0.076935321092605591,0.028582653030753136,-0.038203798234462738,-0.044647634029388428,-0.12351130694150925,-0.044620830565690994,0.068047232925891876,0.0084818070754408836,0.10307444632053375,-0.010481229983270168,-0.039967313408851624,0.015654871240258217,0.11136285215616226,-0.018311358988285065,-0.0017518694512546062,0.067908123135566711,-0.029404452070593834,0.0018734846962615848,0.14792998135089874,0.078981831669807434,0.024540659040212631,0.023787913843989372,0.060430850833654404,0.038360204547643661,-0.028996018692851067,0.0097319446504116058,-0.058763403445482254,0.12085333466529846,0.0084339715540409088,0.059880521148443222,-0.043531652539968491,-0.060985218733549118,0.08584488183259964,0.022319184616208076,-0.074443720281124115,-0.023591099306941032,-0.0853504166007042,0.018554488196969032,-0.00064867472974583507,-0.055574432015419006,0.05581393837928772,-0.015528258867561817,-0.072987429797649384,0.0099770277738571167,-0.030999768525362015,-0.08910764753818512,0.065348975360393524,0.00077246897853910923,-0.10630039125680923,0.011441937647759914,-0.03915732353925705,-0.036813698709011078,0.0066364984959363937,-0.073071748018264771,0.0712970495223999,0.011438386514782906,0.01433718204498291,-0.037875905632972717,0.15495562553405762,-1.5831511999126489e-33,0.022559830918908119,0.089319579303264618,-0.10455513745546341,0.052241604775190353,-0.013454077765345573,-0.031639117747545242,0.06500939279794693,-0.0284844059497118,0.00092236325144767761,0.038908950984478,0.00029624858871102333,-0.033434655517339706,-0.04461219534277916,-0.016824167221784592,0.0075800926424562931,0.041147030889987946,-0.011042596772313118,-0.035035762935876846,0.031898148357868195,0.040792141109704971,-0.029485557228326797,0.034458965063095093,-0.023295730352401733,0.010138559155166149,-0.0013131242012605071,-0.0562063567340374,-0.0796331986784935,-0.013598407618701458,0.057616140693426132,0.0018843074794858694,-0.013931321911513805,-0.060481537133455276,-0.0079910708591341972,0.0350370854139328,0.016636326909065247,-0.028667660430073738,0.033284824341535568,-0.090673916041851044,0.018373124301433563,0.034279726445674896,0.020648406818509102,-0.010165012441575527,0.033231917768716812,-0.031692232936620712,0.012806424871087074,0.00977937038987875,-0.012115636840462685,-0.059830803424119949,-0.0066253854893147945,0.017183840274810791,0.010225978679955006,-0.13386650383472443,-0.058862537145614624,-0.01596464030444622,-0.035485479980707169,-0.032304286956787109,-0.0039456575177609921,0.0032617086544632912,-0.09479900449514389,0.0052017923444509506,-0.084832780063152313,0.089948028326034546,0.0049387668259441853,0.035696186125278473,-0.035195432603359222,-0.091141507029533386,-0.034479368478059769,-0.00054888840531930327,-0.027255982160568237,-0.039602935314178467,-0.064644426107406616,-0.0035995638463646173,-0.021918890997767448,-0.016231661662459373,0.036691036075353622,-0.0046688457950949669,0.00026346361846663058,-0.05045536532998085,-0.0664081946015358,-0.0079217059537768364,0.044381462037563324,-0.0068306014873087406,-0.044355291873216629,-0.047771237790584564,-0.042710728943347931,0.059850443154573441,-0.0021529668010771275,0.040710151195526123,-0.061583314090967178,-0.0083652772009372711,-0.053530089557170868,0.0807487815618515,0.046096671372652054,0.011337839998304844,-0.068883456289768219,-3.9873565782500009e-08,-0.079927548766136169,-0.038922104984521866,0.017164876684546471,-0.016863491386175156,-0.05259178951382637,0.010732149705290794,0.044856514781713486,0.026750223711133003,-0.067096494138240814,-0.042679715901613235,-0.023660965263843536,0.014086552895605564,-0.073246121406555176,0.016386372968554497,-0.01983029767870903,-0.038051415234804153,-0.028749473392963409,-0.018861113116145134,0.013255080208182335,0.037025988101959229,-0.015772826969623566,-0.042650006711483,0.013065376318991184,0.0032053228933364153,-0.043996851891279221,0.059188131242990494,-0.011448049917817116,0.11726132780313492,-0.049794871360063553,-0.052789811044931412,0.0055290786549448967,0.077596381306648254,-0.07194199413061142,0.029212009161710739,-0.057105604559183121,0.056300446391105652,0.034002110362052917,0.040014155209064484,0.042251989245414734,0.035935178399086,0.024608166888356209,0.002855262253433466,-0.11619970947504044,0.016197863966226578,-0.017624367028474808,-0.018337029963731766,-0.064399540424346924,-0.10701717436313629,-0.05845068022608757,-0.078958600759506226,-0.08278830349445343,-0.078441470861434937,0.036912910640239716,0.020200498402118683,0.027203796431422234,0.043305404484272,0.10155899077653885,-0.045648202300071716,-0.028146548196673393,-0.017221223562955856,0.0603332556784153,0.10680093616247177,0.024070294573903084,0.0063274125568568707]
# embedding_in2 = [0.026267103850841522,0.037907317280769348,0.024525124579668045,0.029595637694001198,-0.044671546667814255,0.0095926057547330856,-0.15134187042713165,0.11810289323329926,-0.015794925391674042,-0.019997801631689072,0.098918311297893524,-0.024774046614766121,-0.030893459916114807,0.0697043240070343,-0.017731310799717903,0.00056030129780992866,0.035749096423387527,-0.074703812599182129,0.036415852606296539,-0.000619470258243382,0.030586903914809227,0.017045922577381134,0.035448759794235229,0.0057706725783646107,-0.024602580815553665,0.0358581617474556,-0.024140782654285431,0.0085632726550102234,0.070415578782558441,0.05552104115486145,-0.019665004685521126,-0.011292458511888981,-0.003353828564286232,-0.012198800221085548,-0.021180009469389915,-0.059183426201343536,-0.026024170219898224,0.061589460819959641,-0.014876763336360455,0.024039192125201225,0.066444613039493561,-0.0888136550784111,-0.020985208451747894,0.0017487247241660953,-0.012653903104364872,-0.0076928446069359779,-0.061010003089904785,-0.026404108852148056,-0.005798964761197567,0.050189260393381119,-0.08072788268327713,-0.056292213499546051,-0.022117925807833672,0.012619406916201115,0.0020115796942263842,0.086274027824401855,-0.03006930835545063,-0.021033519878983498,0.039841968566179276,-0.055124763399362564,-0.11615898460149765,0.050801869481801987,-0.060151029378175735,0.049869157373905182,0.076230436563491821,0.063136205077171326,-0.048008084297180176,-0.0449572317302227,0.11688419431447983,0.072663269937038422,0.013512346893548965,0.015222257003188133,0.018507225438952446,0.052659139037132263,-0.048020187765359879,-0.0043962486088275909,-0.016583876684308052,-0.019439850002527237,0.032475989311933517,-0.10591078549623489,-0.065892882645130157,-0.086940109729766846,0.0027651493437588215,0.024976678192615509,0.04819902777671814,0.034945551306009293,0.042085468769073486,0.11274479329586029,-0.10151699185371399,0.00024471429060213268,0.12627044320106506,0.080439537763595581,-0.079147517681121826,0.050401404500007629,-0.03268171101808548,0.00117178272921592,-0.015280586667358875,-0.018055038526654243,0.062954582273960114,-0.0010269925696775317,-0.010977206751704216,0.010306271724402905,-0.012520528398454189,0.0671594962477684,-0.03746873140335083,-0.020396476611495018,-0.041344422847032547,-0.065446056425571442,-0.0297124981880188,0.038785193115472794,0.052500568330287933,0.0346025675535202,0.067347511649131775,-0.049493830651044846,0.036659087985754013,0.11879989504814148,-0.025385407730937004,0.05251627042889595,0.056224916130304337,-0.04134843498468399,0.031520918011665344,-0.022219490259885788,0.00204703351482749,-0.095263659954071045,-0.034301117062568665,0.0211124699562788,0.087231948971748352,5.8035353634966234e-33,-0.0074968519620597363,-0.12676194310188293,0.0053533986210823059,0.0095562972128391266,0.0077901575714349747,0.018683165311813354,-0.0788785070180893,-0.01234939880669117,0.0636117234826088,0.01249073538929224,-0.035951267927885056,-0.0089350100606679916,0.0047081210650503635,-0.040648475289344788,-0.14922076463699341,0.01531602256000042,0.13182257115840912,0.071472965180873871,-0.025351101532578468,0.065584518015384674,0.0078705418854951859,-0.11903544515371323,0.020777497440576553,0.016914431005716324,0.016333766281604767,0.0093149673193693161,-0.035492092370986938,0.0495251826941967,-0.071409799158573151,0.0048443013802170753,0.043465763330459595,0.015781097114086151,-0.064601384103298187,-0.054555855691432953,-0.035245642066001892,0.011146018281579018,0.068841516971588135,0.026316095143556595,0.0325651615858078,-0.0354200154542923,-0.0079132486134767532,0.030712280422449112,0.044134881347417831,-0.011910760775208473,0.04733864963054657,-0.081940867006778717,-0.064599998295307159,-0.0200547743588686,0.022121183574199677,0.033480823040008545,-0.044224612414836884,0.010039624758064747,-0.02120433934032917,-0.081588193774223328,0.0064487042836844921,0.0504099503159523,0.033282577991485596,0.015190273523330688,-0.029128976166248322,0.085343070328235626,0.14650167524814606,0.04821372777223587,-0.04404127225279808,-0.0076662888750433922,-0.0281903687864542,-0.009267888031899929,-0.12056928873062134,-0.091908760368824,0.021986491978168488,0.088754363358020782,0.014072907157242298,0.047296587377786636,0.044966187328100204,-0.042894981801509857,0.05540713295340538,-0.020928027108311653,0.012148315086960793,0.032732810825109482,0.010751496069133282,-0.016579244285821915,0.023321462795138359,0.027871113270521164,-0.042984236031770706,0.0096650524064898491,-0.0039626886136829853,-0.0051661957986652851,-0.038476556539535522,0.039655767381191254,-0.11601664870977402,-0.0039911442436277866,-0.0046301749534904957,0.053412109613418579,-0.018997605890035629,0.097894147038459778,0.070715978741645813,-5.6745046546847226e-33,0.035220984369516373,0.10738281905651093,-0.051852688193321228,-0.0072707869112491608,0.085996769368648529,0.014292976818978786,0.081629477441310883,0.027675678953528404,0.0764143317937851,0.072348415851593018,0.079646140336990356,-0.0440690740942955,-0.081785373389720917,-0.0537564679980278,-0.022769728675484657,0.0074892868287861347,0.083716049790382385,-0.048282336443662643,0.017550311982631683,-0.0042897015810012817,0.043277088552713394,0.071282379329204559,-0.069826185703277588,-0.010406610555946827,0.031924180686473846,0.036292850971221924,0.03522404283285141,-0.013223933987319469,-0.099470168352127075,-0.049515329301357269,-0.052156433463096619,-0.083274915814399719,0.022587412968277931,0.047393865883350372,0.03159734234213829,-0.011896832846105099,0.0042832395993173122,-0.046870790421962738,-0.008397245779633522,0.072923369705677032,0.060390397906303406,0.043716315180063248,-0.0021404179278761148,-0.025411799550056458,0.0087908916175365448,0.0732952132821083,0.11258243769407272,-0.057927809655666351,-0.023502729833126068,0.021927224472165108,-0.022924082353711128,0.02247297577559948,-0.0367264598608017,0.041537664830684662,0.0011308075627312064,-0.027548898011446,-0.00032430046121589839,-0.090084895491600037,-0.05904778465628624,0.00042631567339412868,0.013003425672650337,-0.011832204647362232,-0.056357551366090775,-0.038868479430675507,-0.012360915541648865,0.033372748643159866,0.024786341935396194,-0.025076640769839287,0.041407659649848938,-0.033873766660690308,-0.050026416778564453,-0.030720382928848267,-0.0082843927666544914,-0.099961228668689728,-0.011155036278069019,-0.097717911005020142,-0.069994315505027771,-0.0015430820640176535,-0.0061242980882525444,-0.052946459501981735,-0.084578573703765869,-0.02499835379421711,0.022812170907855034,0.038754012435674667,-0.049806125462055206,-0.025738390162587166,0.018744593486189842,-0.043269611895084381,0.054058171808719635,-0.0021406749729067087,0.024557935073971748,0.021111024543642998,-0.076928630471229553,0.061281614005565643,0.03328864648938179,-4.9733344553715142e-08,-0.061824139207601547,-0.10561777651309967,-0.011211640201508999,0.033723920583724976,0.086981654167175293,-0.0709456205368042,-0.046649526804685593,-0.0043385890312492847,0.01015594694763422,-0.045842088758945465,0.00091580348089337349,-0.040649335831403732,-0.0048332787118852139,-0.01891801692545414,0.050385776907205582,-0.036379456520080566,0.0075669744983315468,-0.0025951017159968615,-0.043894782662391663,-0.085875809192657471,-0.03687451034784317,-0.044534116983413696,-0.030876563861966133,-0.0191446915268898,-0.0081665981560945511,0.07219291478395462,-0.1009756401181221,0.024203957989811897,-0.0012709344737231731,-0.024450572207570076,0.0376095175743103,0.016817782074213028,0.045676849782466888,-0.04746541753411293,-0.024467699229717255,-0.049858525395393372,-0.00819088239222765,0.036430075764656067,0.02864982932806015,0.079652063548564911,0.024094671010971069,-0.071411170065402985,0.015611380338668823,0.064397640526294708,0.048233106732368469,-0.03629843145608902,0.0033277894835919142,-0.022074557840824127,0.012062899768352509,-0.11455900967121124,0.025539441034197807,-0.074713215231895447,0.039190035313367844,-0.019351102411746979,-0.014124805107712746,0.044126152992248535,0.039036806672811508,-0.029270930215716362,-0.074229300022125244,0.0143920062109828,0.032622110098600388,-0.015391886234283447,-0.069746054708957672,-0.002256602980196476]
# print(params.format_query(
#     [
#         Embedding(id="a",
#               metadata={"language": "en"},
#               dense_embedding=embedding_in
#               ),
#         Embedding(id="b",
#               metadata={"language": "en"},
#               dense_embedding=embedding_in2
#               )
#     ]
# )
# )